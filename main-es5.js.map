{"version":3,"sources":["webpack:///src/app/components/cognite-model-revisions-list/cognite-model-revisions-list.component.ts","webpack:///src/app/components/cognite-model-revisions-list/cognite-model-revisions-list.component.html","webpack:///src/app/graphql.module.ts","webpack:///src/environments/environment.ts","webpack:///src/app/itg-api.service.ts","webpack:///src/app/components/cognite-threed-node-details/cognite-threed-node-details.component.ts","webpack:///src/app/components/cognite-threed-node-details/cognite-threed-node-details.component.html","webpack:///src/app/page/login-page/login.component.ts","webpack:///src/app/page/login-page/login.component.html","webpack:///src/app/components/cognite-threed-viewer/cognite-threed-viewer.component.ts","webpack:///src/app/components/cognite-threed-viewer/cognite-threed-viewer.component.html","webpack:///src/app/app.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/components/itg-group-details/itg-group-details.component.ts","webpack:///src/app/components/itg-group-details/itg-group-details.component.html","webpack:///src/app/components/itg-groups-list/itg-groups-list.component.html","webpack:///src/app/components/itg-groups-list/itg-groups-list.component.ts","webpack:///src/app/components/itg-groups-list/new-group-dialog.component.html","webpack:///src/app/components/cognite-models-list/cognite-models-list.component.ts","webpack:///src/app/components/cognite-models-list/cognite-models-list.component.html","webpack:///src/app/cognite-api.service.ts","webpack:///src/app/components/file-list/file-list.component.ts","webpack:///src/app/components/file-list/file-list.component.html","webpack:///src/app/components/top-bar/top-bar.component.html","webpack:///src/app/components/top-bar/top-bar.component.ts","webpack:///src/app/page/threed-page/threed-page.component.ts","webpack:///src/app/page/threed-page/threed-page.component.html","webpack:///src/app/cognite-auth.service.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["CogniteModelRevisionsListComponent","cogniteApiService","newRevisionId","loading","revisions","get3DModelRevisions","modelId","subscribe","result","newSelectedRevisionId","selectedRevision","emit","URL","createApollo","httpLink","link","from","headers","authorization","localStorage","getItem","create","uri","cache","GraphQLModule","provide","useFactory","deps","environment","production","QUERY_GROUPS","CREATE_GROUP","DELETE_GROUP","CREATE_NODE","QUERY_NODE_BY_ID","ADD_NODE_TO_GROUP","REMOVE_NODE_FROM_GROUP","CogniteITGService","graphqlClient","revisionId","pollInterval","watchQuery","query","variables","groupId","name","mutate","mutation","nodeId","comment","createNodeIfNotExists","pipe","data","MyNode","length","onClearSelection","CogniteThreedNodeDetailsComponent","itgService","apiService","get3DModelNode","nodes","node","getGroup","valueChanges","res","group","MyGroup","changes","previousValue","currentValue","unflattenList","properties","some","el","addNodeToGroup","removeNodeFromGroup","obj","key","Object","entries","reduce","prev","innerKey","value","visibleKey","concat","LoginComponent","cogniteAuthService","apiKey","onLogin","login","setItem","getSdk","status","CogniteThreedViewerComponent","onNodeSelect","visibleNodeIds","undefined","sdk","domElement","document","getElementById","viewer","on","_onClick","bind","_addModelToViewer","model","selectedNodeId","_highlightNodes","visibleGroupId","map","dispose","removeModel","addModel","loadCameraFromModel","offsetX","offsetY","intersection","getIntersectionFromPixel","currentModel","treeIndex","mapTreeIndexToNodeId","removeAllStyledNodeSets","mapNodeIdToTreeIndex","selectedTreeIndex","newNodeSet","addStyledNodeSet","color","outlineColor","Pink","Promise","all","id","visibleTreeIndexes","renderGhosted","AppComponent","isLoggedIn","loggedIn","AppModule","forRoot","path","component","onHighlightGroup","ItgGroupDetailsComponent","onBackClicked","onNodeClicked","groupQuery","Number","ItgGroupsListComponent","dialog","onSelectGroup","groups","_refetchList","groupsQuery","getGroups","results","dialogRef","open","DialogOverviewExampleDialog","width","afterClosed","newGroupName","createGroup","refetch","deleteGroup","selectedGroupId","openDialog","close","onNoClick","CogniteModelsListComponent","onModelAndRevision","models","get3DModels","newSelectedModelId","selectedModel","CogniteApiService","models3D","list","limit","autoPagingToArray","revisions3D","viewer3D","listRevealNodes3D","FileListComponent","apollo","error","favourites","MyFavorite","TopBarComponent","clear","window","location","href","ThreedPageComponent","router","route","isGroupHightlighted","parseUrl","url","queryParams","activeRevision","queryParamMap","params","get","newRevision","navigate","queryParamsHandling","activeGroupId","activeNodeId","newGroupId","setActiveRevision","CogniteAuthService","appId","apikey","a","response","loginWithApiKey","project","next","bootstrapModule","err","console","webpackEmptyAsyncContext","req","resolve","then","e","Error","code","keys","module","exports"],"mappings":"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","file":"main-es5.js","sourcesContent":["import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport { Revision3D } from '@cognite/sdk/dist/src';\nimport { CogniteApiService } from '../../cognite-api.service';\n\n@Component({\n  selector: 'app-cognite-model-revisions-list',\n  templateUrl: './cognite-model-revisions-list.component.html',\n  styleUrls: ['./cognite-model-revisions-list.component.css'],\n})\nexport class CogniteModelRevisionsListComponent implements OnInit, OnChanges {\n  @Input() modelId: number;\n  @Output() newRevisionId = new EventEmitter<number>();\n\n  revisions: Revision3D[];\n  loading = true;\n  error: any;\n\n  selectedRevision: number;\n\n  constructor(private cogniteApiService: CogniteApiService) {\n    this.revisions = [];\n  }\n\n  ngOnInit(): void {\n    this.cogniteApiService\n      .get3DModelRevisions(this.modelId)\n      .subscribe((result) => {\n        this.revisions = result;\n      });\n  }\n\n  ngOnChanges(): void {\n    this.cogniteApiService\n      .get3DModelRevisions(this.modelId)\n      .subscribe((result) => {\n        this.revisions = result;\n      });\n  }\n\n  onRevisionSelected(newSelectedRevisionId: number): void {\n    this.selectedRevision = newSelectedRevisionId;\n    this.newRevisionId.emit(newSelectedRevisionId);\n  }\n}\n","<div class=\"flex\">\n  <div style=\"flex: 1\">\n    <mat-list *ngFor=\"let item of revisions\">\n      <mat-list-item role=\"listitem\">\n        <button mat-button (click)=\"onRevisionSelected(item.id)\">\n          {{ item.createdTime.toISOString() }}\n          <mat-icon>arrow_forward</mat-icon>\n        </button></mat-list-item\n      >\n    </mat-list>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { APOLLO_OPTIONS } from 'apollo-angular';\nimport {\n  ApolloClientOptions,\n  ApolloLink,\n  InMemoryCache,\n} from '@apollo/client/core';\nimport { HttpLink } from 'apollo-angular/http';\nimport { setContext } from '@apollo/client/link/context';\n\n// UPDATE THE URL BELOW TO BE THE CORRECT PROJECT ID\nconst URL =\n  'https://itg.cognite.ai/api/v1/projects/a24a387c5-396e-4443-89d4-cfad8ade6509/graphql'; // <-- add the URL of the GraphQL server here\n\nexport function createApollo(httpLink: HttpLink): ApolloClientOptions<any> {\n  return {\n    link: ApolloLink.from([\n      setContext(() => ({\n        headers: {\n          // Add the API key for api request to your data model\n          authorization: `Bearer ${localStorage.getItem('API_KEY')}`,\n        },\n      })),\n      httpLink.create({\n        uri: URL,\n      }),\n    ]),\n    cache: new InMemoryCache(),\n  };\n}\n@NgModule({\n  providers: [\n    {\n      provide: APOLLO_OPTIONS,\n      useFactory: createApollo,\n      deps: [HttpLink],\n    },\n  ],\n})\nexport class GraphQLModule {}\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","import { Injectable } from '@angular/core';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { ListResponse, Model3D, RevealNode3D, Revision3D } from '@cognite/sdk';\nimport { Apollo, gql } from 'apollo-angular';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { CogniteAuthService } from './cognite-auth.service';\n\nconst QUERY_GROUPS = gql`\n  query QueryGroup($modelId: String, $revisionId: String, $groupId: ID) {\n    MyGroup(\n      filter: { modelId: $modelId, revisionId: $revisionId, id: $groupId }\n    ) {\n      id\n      name\n      modelId\n      revisionId\n      nodes {\n        nodeId\n        comment\n      }\n    }\n  }\n`;\n\nconst CREATE_GROUP = gql`\n  mutation CreateGroup(\n    $modelId: String!\n    $revisionId: String!\n    $name: String!\n  ) {\n    CreateMyGroup(modelId: $modelId, revisionId: $revisionId, name: $name) {\n      id\n    }\n  }\n`;\n\nconst DELETE_GROUP = gql`\n  mutation CreateGroup($groupId: ID!) {\n    DeleteMyGroup(id: $groupId) {\n      id\n    }\n  }\n`;\n\nconst CREATE_NODE = gql`\n  mutation CreateNode($nodeId: String!, $comment: String) {\n    MergeMyNode(nodeId: $nodeId, comment: $comment) {\n      nodeId\n    }\n  }\n`;\n\nconst QUERY_NODE_BY_ID = gql`\n  query MyNode($nodeId: String!) {\n    MyNode(nodeId: $nodeId) {\n      nodeId\n    }\n  }\n`;\n\nconst ADD_NODE_TO_GROUP = gql`\n  mutation AddNodeToGroup($nodeId: String!, $groupId: ID!) {\n    AddMyNodeGroup(from: { id: $groupId }, to: { nodeId: $nodeId }) {\n      to {\n        nodeId\n      }\n    }\n  }\n`;\nconst REMOVE_NODE_FROM_GROUP = gql`\n  mutation RemoveNodeToGroup($nodeId: String!, $groupId: ID!) {\n    RemoveMyNodeGroup(from: { id: $groupId }, to: { nodeId: $nodeId }) {\n      to {\n        nodeId\n      }\n    }\n  }\n`;\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CogniteITGService {\n  constructor(private graphqlClient: Apollo) {}\n\n  getGroups(modelId: number, revisionId: number, pollInterval?: number) {\n    return this.graphqlClient.watchQuery({\n      query: QUERY_GROUPS,\n      variables: {\n        modelId: `${modelId}`,\n        revisionId: `${revisionId}`,\n      },\n      pollInterval,\n    });\n  }\n  getGroup(groupId: string, pollInterval?: number) {\n    return this.graphqlClient.watchQuery<{ MyGroup: any[] }>({\n      query: QUERY_GROUPS,\n      variables: {\n        groupId,\n      },\n      pollInterval,\n    });\n  }\n  createGroup(modelId: number, revisionId: number, name: string) {\n    return this.graphqlClient.mutate({\n      mutation: CREATE_GROUP,\n      variables: {\n        modelId: `${modelId}`,\n        revisionId: `${revisionId}`,\n        name,\n      },\n    });\n  }\n  deleteGroup(groupId: string) {\n    return this.graphqlClient.mutate({\n      mutation: DELETE_GROUP,\n      variables: {\n        groupId,\n      },\n    });\n  }\n\n  addNodeToGroup(nodeId: number, groupId: string, comment?: string) {\n    return this.createNodeIfNotExists(nodeId, comment).subscribe(() => {\n      return this.graphqlClient\n        .mutate({\n          mutation: ADD_NODE_TO_GROUP,\n          variables: {\n            nodeId: `${nodeId}`,\n            groupId: groupId,\n          },\n        })\n        .subscribe();\n    });\n  }\n\n  removeNodeFromGroup(nodeId: number, groupId: string) {\n    return this.graphqlClient\n      .mutate({\n        mutation: REMOVE_NODE_FROM_GROUP,\n        variables: {\n          nodeId: `${nodeId}`,\n          groupId: groupId,\n        },\n      })\n      .subscribe();\n  }\n\n  createNodeIfNotExists(nodeId: number, comment?: string) {\n    return this.graphqlClient\n      .query<{ MyNode: any[] }>({\n        query: QUERY_NODE_BY_ID,\n        variables: {\n          nodeId: `${nodeId}`,\n        },\n      })\n      .pipe(\n        map(\n          (\n            result: ApolloQueryResult<{\n              MyNode: any[];\n            }>\n          ) => {\n            if (result.data.MyNode.length === 0) {\n              return this.graphqlClient\n                .mutate<{ MyNode: any[] }>({\n                  mutation: CREATE_NODE,\n                  variables: {\n                    nodeId: `${nodeId}`,\n                    comment: comment,\n                  },\n                })\n                .subscribe();\n            }\n            return result;\n          }\n        )\n      );\n  }\n}\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { RevealNode3D } from '@cognite/sdk/dist/src';\nimport { CogniteApiService } from 'src/app/cognite-api.service';\nimport { CogniteITGService } from 'src/app/itg-api.service';\n\n@Component({\n  selector: 'app-cognite-threed-node-details',\n  templateUrl: './cognite-threed-node-details.component.html',\n  styleUrls: ['./cognite-threed-node-details.component.css'],\n})\nexport class CogniteThreedNodeDetailsComponent implements OnInit, OnChanges {\n  @Input() modelId: number;\n  @Input() revisionId: number;\n  @Input() nodeId: number;\n  @Input() groupId: string | undefined;\n  @Output() onClearSelection = new EventEmitter();\n  group: any;\n\n  node: RevealNode3D | undefined;\n\n  constructor(\n    private itgService: CogniteITGService,\n    private apiService: CogniteApiService\n  ) {}\n\n  ngOnInit(): void {\n    this.apiService\n      .get3DModelNode(this.modelId, this.revisionId, this.nodeId)\n      .subscribe((nodes) => (this.node = nodes[0]));\n    if (this.groupId) {\n      this.itgService\n        .getGroup(this.groupId)\n        .valueChanges.subscribe((res) => (this.group = res.data.MyGroup[0]));\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (\n      changes.nodeId &&\n      changes.nodeId.previousValue !== changes.nodeId.currentValue\n    ) {\n      this.apiService\n        .get3DModelNode(this.modelId, this.revisionId, this.nodeId)\n        .subscribe((nodes) => (this.node = nodes[0]));\n    }\n    if (changes.groupId && this.groupId) {\n      this.itgService\n        .getGroup(this.groupId)\n        .valueChanges.subscribe((res) => (this.group = res.data.MyGroup[0]));\n    }\n  }\n\n  get properties() {\n    return unflattenList(this.node.properties);\n  }\n  get isInGroup() {\n    if (!this.group) {\n      return false;\n    }\n    return this.group.nodes.some((el) => el.nodeId === `${this.nodeId}`);\n  }\n\n  addNodeToGroup() {\n    if (this.groupId) {\n      this.itgService.addNodeToGroup(this.nodeId, this.groupId);\n    }\n  }\n  deleteNodeFromGroup() {\n    if (this.groupId) {\n      this.itgService.removeNodeFromGroup(this.nodeId, this.groupId);\n    }\n  }\n}\n\nconst unflattenList = (obj: any, key?: string) => {\n  return Object.entries(obj).reduce((prev, [innerKey, value]) => {\n    const visibleKey = key ? `${key}.` : '';\n    if (typeof value === 'object') {\n      return prev.concat(unflattenList(value, `${visibleKey}${innerKey}`));\n    }\n    return prev.concat([[`${visibleKey}${innerKey}`, value]]);\n  }, []);\n};\n","<div class=\"wrapper\">\n  <mat-progress-spinner *ngIf=\"node === undefined\"></mat-progress-spinner>\n  <div *ngIf=\"node !== undefined\">\n    <button mat-button (click)=\"onClearSelection.emit()\">\n      <mat-icon>close</mat-icon> Cancel Node Selection\n    </button>\n    <mat-divider></mat-divider>\n    <h3 style=\"margin-top: 12px\">{{ node.name }}</h3>\n    <button\n      mat-raised-button\n      [disabled]=\"groupId === undefined\"\n      *ngIf=\"!isInGroup\"\n      (click)=\"addNodeToGroup()\"\n      color=\"primary\"\n    >\n      Add to group\n    </button>\n    <button\n      mat-raised-button\n      *ngIf=\"isInGroup\"\n      [disabled]=\"groupId === undefined\"\n      (click)=\"deleteNodeFromGroup()\"\n      color=\"warn\"\n    >\n      Remove from group\n    </button>\n    <p *ngIf=\"groupId === undefined\" style=\"margin-top: 12px\">\n      Unable to add to group, please create/select a group first.\n    </p>\n    <p style=\"margin-top: 12px\">Properties</p>\n    <table mat-table [dataSource]=\"properties\" style=\"width: 100%\">\n      <ng-container matColumnDef=\"key\">\n        <th mat-header-cell *matHeaderCellDef>Key</th>\n        <td mat-cell *matCellDef=\"let element\">{{ element[0] }}</td>\n      </ng-container>\n      <ng-container matColumnDef=\"value\">\n        <th mat-header-cell *matHeaderCellDef>Value</th>\n        <td mat-cell *matCellDef=\"let element\">{{ element[1] }}</td>\n      </ng-container>\n      <tr mat-header-row *matHeaderRowDef=\"['key', 'value']\"></tr>\n      <tr mat-row *matRowDef=\"let row; columns: ['key', 'value']\"></tr>\n    </table>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { CogniteAuthService } from '../../cognite-auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css'],\n})\nexport class LoginComponent implements OnInit {\n  apiKey = localStorage.getItem('API_KEY') || '';\n  cogniteAuthService: CogniteAuthService;\n\n  constructor(cogniteAuthService: CogniteAuthService) {\n    this.cogniteAuthService = cogniteAuthService;\n  }\n\n  ngOnInit(): void {\n    if (localStorage.getItem('API_KEY')) {\n      this.onLogin();\n    }\n  }\n\n  async onLogin() {\n    await this.cogniteAuthService.login(this.apiKey);\n    localStorage.setItem('API_KEY', this.apiKey);\n    await this.cogniteAuthService.getSdk().login.status();\n  }\n}\n","<div class=\"wrapper\">\n  <p>\n    * By default, if you have not deployed the schema in another tenant (see\n    README.md for more info), the project is on `sample-cdf-graphql-angular-app`\n    in the `aize-dev` tenant.\n  </p>\n  <mat-form-field style=\"width: 400px\">\n    <mat-label>Cognite API Key (aize-dev tenant by default*)</mat-label>\n    <input\n      matInput\n      placeholder=\"Ex. API key for `aize-dev` tenant\"\n      [(ngModel)]=\"apiKey\"\n    />\n  </mat-form-field>\n  <button mat-button (click)=\"onLogin()\">Login</button>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  ByTreeIndexNodeSet,\n  Cognite3DModel,\n  Cognite3DViewer,\n  CognitePointCloudModel,\n  InvertedNodeSet,\n  NodeOutlineColor,\n} from '@cognite/reveal';\nimport { CogniteClient } from '@cognite/sdk';\nimport { CogniteAuthService } from 'src/app/cognite-auth.service';\nimport { CogniteITGService } from 'src/app/itg-api.service';\n// UPDATES TO FILE PLEASE REMEMBER TO UPDATE README\n@Component({\n  selector: 'app-cognite-threed-viewer',\n  templateUrl: './cognite-threed-viewer.component.html',\n  styleUrls: ['./cognite-threed-viewer.component.css'],\n})\nexport class CogniteThreedViewerComponent\n  implements OnInit, OnChanges, OnDestroy\n{\n  @Input() modelId: number;\n  @Input() revisionId: number;\n  @Input() selectedNodeId: number;\n  @Output() onNodeSelect = new EventEmitter<number>();\n\n  viewer: Cognite3DViewer;\n  sdk: CogniteClient;\n\n  model: Cognite3DModel | CognitePointCloudModel;\n\n  @Input() visibleGroupId: string | undefined;\n  visibleNodeIds: number[] | undefined = undefined;\n\n  constructor(\n    private cogniteAuthService: CogniteAuthService,\n    // Not needed to load just the model.\n    private itgService: CogniteITGService\n  ) {\n    this.sdk = this.cogniteAuthService.getSdk();\n  }\n\n  /**\n   * Runs when the component is initialized.\n   *\n   * Loads in the model and and sets a `onClick` that detects the location a click event has happened.\n   */\n  async ngOnInit(): Promise<void> {\n    const domElement = document.getElementById('viewer');\n\n    // Instantiates the viewer\n    this.viewer = new Cognite3DViewer({\n      sdk: this.sdk,\n      domElement,\n    });\n\n    // Setup a click handler\n    this.viewer.on('click', this._onClick.bind(this));\n\n    // Add the model to the viewer.\n    this._addModelToViewer(this.modelId, this.revisionId);\n  }\n\n  async ngOnChanges(changes: SimpleChanges): Promise<void> {\n    if (changes.revisionId && this.model) {\n      this._addModelToViewer(this.modelId, this.revisionId);\n    }\n    if (changes.selectedNodeId) {\n      this._highlightNodes(this.selectedNodeId, this.visibleNodeIds);\n    }\n    if (changes.visibleGroupId) {\n      if (this.visibleGroupId) {\n        this.itgService\n          .getGroup(this.visibleGroupId)\n          .valueChanges.subscribe((res) => {\n            this.visibleNodeIds = res.data.MyGroup[0].nodes.map(\n              (el) => el.nodeId\n            );\n            if (this.visibleGroupId) {\n              this._highlightNodes(this.selectedNodeId, this.visibleNodeIds);\n            }\n          });\n      } else {\n        this.visibleNodeIds = undefined;\n        this._highlightNodes(this.selectedNodeId, this.visibleNodeIds);\n      }\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.viewer.dispose();\n  }\n\n  /**\n   * Adds a model to the viewer\n   *\n   * @param modelId id of the model from CDF\n   * @param revisionId id of the revision that you want for the model from CDF\n   */\n  async _addModelToViewer(modelId: number, revisionId: number) {\n    // Remove any of the existing model\n    if (this.model) {\n      await this.viewer.removeModel(this.model);\n    }\n    // Add the model to the 3d viewer\n    this.model = await this.viewer.addModel({\n      modelId: modelId,\n      revisionId: revisionId,\n    });\n    // Load and use the initial camera associated with the model\n    this.viewer.loadCameraFromModel(this.model);\n  }\n\n  /**\n   * When a click occured in the viewer, this should be what handles it.\n   *\n   * @param param0 { offsetX, offsetY }\n   */\n  async _onClick({ offsetX, offsetY }: { offsetX: number; offsetY: number }) {\n    if (this.viewer) {\n      // Get the location of the \"click\" event.\n      const intersection = this.viewer.getIntersectionFromPixel(\n        offsetX,\n        offsetY\n      );\n\n      // If the \"click\" has a valid intersection with an object on screen\n      if (intersection) {\n        const currentModel = intersection.model as Cognite3DModel;\n        // Get the treeIndex, which is the identifier for a node in a 3D tree\n        const treeIndex = (intersection as any).treeIndex;\n\n        // Sadly the treeIndex is only used internally for the viewer - we need to next get the nodeId\n        const nodeId = await currentModel.mapTreeIndexToNodeId(treeIndex);\n\n        // Great, we have found the nodeId, lets use this\n        this.onNodeSelect.emit(nodeId);\n        this.selectedNodeId = nodeId;\n      }\n    }\n  }\n\n  async _highlightNodes(selectedNodeId?: number, visibleNodeIds?: number[]) {\n    if (this.model) {\n      const currentModel = this.model as Cognite3DModel;\n\n      // Clear all existing node styles\n      await currentModel.removeAllStyledNodeSets();\n\n      // If theres a selection, draw pink box and make all colors for other nodes grey\n      if (selectedNodeId) {\n        // Since the viewer speaks in treeIndex, we need to convert the selected node to treeIndex\n        const selectedTreeIndex = await currentModel.mapNodeIdToTreeIndex(\n          selectedNodeId\n        );\n\n        // In the new viewer, we have to set up a node set and apply a rule on it.\n        // Node set created\n        const newNodeSet = new ByTreeIndexNodeSet([selectedTreeIndex]);\n\n        // Adding style to everything NOT in the node set to make them grey\n        await currentModel.addStyledNodeSet(\n          new InvertedNodeSet(currentModel, newNodeSet),\n          { color: [100, 100, 100] }\n        );\n\n        // Adding style to everything in the node set to make them have a pink outline\n        await currentModel.addStyledNodeSet(newNodeSet, {\n          outlineColor: NodeOutlineColor.Pink,\n        });\n      }\n\n      // If theres a visibility filter, ghost all other nodes\n      if (visibleNodeIds) {\n        // Since the viewer speaks in treeIndex, we need to convert the visible nodes to treeIndexes\n        const visibleTreeIndexes = await Promise.all(\n          visibleNodeIds.map((id) => currentModel.mapNodeIdToTreeIndex(id))\n        );\n\n        // In the new viewer, we have to set up a node set and apply a rule on it.\n        // Node set created\n        const newNodeSet = new ByTreeIndexNodeSet(visibleTreeIndexes);\n\n        // Adding style to everything NOT in the node set to make them ghosted (translucent)\n        await currentModel.addStyledNodeSet(\n          new InvertedNodeSet(currentModel, newNodeSet),\n          { renderGhosted: true }\n        );\n      }\n    }\n  }\n}\n","<div id=\"viewer\"></div>\n","<app-top-bar [isLoggedIn]=\"isLoggedIn\"></app-top-bar>\r\n<app-login *ngIf=\"!isLoggedIn\"></app-login>\r\n\r\n<div class=\"container\" *ngIf=\"isLoggedIn\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n\r\n<!-- \r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n-->\r\n","import { Component } from \"@angular/core\";\r\nimport { CogniteAuthService } from \"./cognite-auth.service\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.css\"],\r\n})\r\nexport class AppComponent {\r\n  isLoggedIn = false;\r\n\r\n  constructor(cogniteAuthService: CogniteAuthService) {\r\n    cogniteAuthService.loggedIn.subscribe(\r\n      (loggedIn) => (this.isLoggedIn = loggedIn)\r\n    );\r\n  }\r\n}\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { GraphQLModule } from './graphql.module';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\nimport { TopBarComponent } from './components/top-bar/top-bar.component';\r\nimport { FileListComponent } from './components/file-list/file-list.component';\r\nimport { CogniteModelsListComponent } from './components/cognite-models-list/cognite-models-list.component';\r\nimport { CogniteModelRevisionsListComponent } from './components/cognite-model-revisions-list/cognite-model-revisions-list.component';\r\nimport { ThreedPageComponent } from './page/threed-page/threed-page.component';\r\nimport { LoginComponent } from './page/login-page/login.component';\r\nimport { CogniteThreedViewerComponent } from './components/cognite-threed-viewer/cognite-threed-viewer.component';\r\nimport {\r\n  ItgGroupsListComponent,\r\n  DialogOverviewExampleDialog,\r\n} from './components/itg-groups-list/itg-groups-list.component';\r\nimport { ItgGroupDetailsComponent } from './components/itg-group-details/itg-group-details.component';\r\nimport { CogniteThreedNodeDetailsComponent } from './components/cognite-threed-node-details/cognite-threed-node-details.component';\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot([{ path: '', component: ThreedPageComponent }]),\r\n    BrowserAnimationsModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatInputModule,\r\n    MatListModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    MatRippleModule,\r\n    MatDialogModule,\r\n    MatTableModule,\r\n    MatProgressSpinnerModule,\r\n    GraphQLModule,\r\n    HttpClientModule,\r\n  ],\r\n  declarations: [\r\n    AppComponent,\r\n    TopBarComponent,\r\n    LoginComponent,\r\n    FileListComponent,\r\n    CogniteModelsListComponent,\r\n    CogniteModelRevisionsListComponent,\r\n    ThreedPageComponent,\r\n    CogniteThreedViewerComponent,\r\n    ItgGroupsListComponent,\r\n    DialogOverviewExampleDialog,\r\n    ItgGroupDetailsComponent,\r\n    CogniteThreedNodeDetailsComponent,\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { QueryRef } from 'apollo-angular';\nimport { CogniteITGService } from 'src/app/itg-api.service';\n\n@Component({\n  selector: 'app-itg-group-details',\n  templateUrl: './itg-group-details.component.html',\n  styleUrls: ['./itg-group-details.component.css'],\n})\nexport class ItgGroupDetailsComponent implements OnInit {\n  @Input() groupId: string;\n  @Output() onBackClicked = new EventEmitter<boolean>();\n  @Output() onNodeClicked = new EventEmitter<number>();\n  @Output() onHighlightGroup = new EventEmitter<boolean>();\n\n  groupQuery: QueryRef<any>;\n  group: any;\n\n  constructor(private itgService: CogniteITGService) {}\n\n  ngOnInit(): void {\n    this.groupQuery = this.itgService.getGroup(this.groupId, 3000);\n\n    this.groupQuery.valueChanges.subscribe(\n      (res) => (this.group = res.data.MyGroup[0])\n    );\n  }\n\n  goBack(): void {\n    this.onBackClicked.emit(true);\n  }\n\n  selectNode(nodeId: string): void {\n    this.onNodeClicked.emit(Number(nodeId));\n  }\n}\n","<mat-progress-spinner *ngIf=\"group === undefined\"></mat-progress-spinner>\n<div *ngIf=\"group !== undefined\">\n  <button mat-button (click)=\"goBack()\">\n    <mat-icon>arrow_back</mat-icon> Back to All Groups for Model\n  </button>\n  <h3>Group: {{ group.name }}</h3>\n  <button\n    mat-raised-button\n    (click)=\"onHighlightGroup.emit(true)\"\n    color=\"primary\"\n  >\n    Toggle group visibility\n  </button>\n  <p style=\"margin-top: 12px\">3D Nodes in {{ group.name }}</p>\n  <mat-list>\n    <mat-list-item\n      mat-ripple\n      *ngFor=\"let item of group.nodes\"\n      style=\"cursor: pointer\"\n      (click)=\"selectNode(item.nodeId)\"\n    >\n      <div matLine>\n        <span>ID: {{ item.nodeId }}</span>\n        <!-- <span>Comment: {{ item.comment || 'N/A' }}</span> -->\n      </div>\n    </mat-list-item>\n  </mat-list>\n</div>\n","<div class=\"wrapper\">\n  <h2>All Saved Groups in ITG for this model</h2>\n  <button mat-raised-button (click)=\"openDialog()\">Create Group</button>\n  <mat-list>\n    <mat-list-item matRipple class=\"item\" *ngFor=\"let item of groups\"\n      ><div mat-line (click)=\"selectGroup(item.id)\">\n        <span>{{ item.name }} ({{ item.nodes.length }} nodes) </span>\n      </div>\n      <button mat-button color=\"warn\" (click)=\"deleteGroup(item.id)\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </mat-list-item>\n  </mat-list>\n  <p *ngIf=\"groups.length === 0\">No Groups Defined</p>\n</div>\n","import {\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnInit,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport {\n  MatDialog,\n  MatDialogRef,\n  MAT_DIALOG_DATA,\n} from '@angular/material/dialog';\nimport { ApolloQueryResult } from '@apollo/client/core';\nimport { QueryRef } from 'apollo-angular';\nimport { CogniteITGService } from 'src/app/itg-api.service';\n\n@Component({\n  selector: 'app-itg-groups-list',\n  templateUrl: './itg-groups-list.component.html',\n  styleUrls: ['./itg-groups-list.component.css'],\n})\nexport class ItgGroupsListComponent implements OnInit, OnChanges {\n  @Input() modelId: number;\n  @Input() revisionId: number;\n  @Input() selectedGroupId: string;\n  @Output() onSelectGroup = new EventEmitter<string>();\n\n  groupsQuery: QueryRef<any>;\n  newGroupName: string;\n\n  groups: any[] = [];\n\n  constructor(\n    private itgService: CogniteITGService,\n    public dialog: MatDialog\n  ) {}\n\n  async ngOnInit(): Promise<void> {\n    this._refetchList();\n  }\n\n  async ngOnChanges(changes: SimpleChanges): Promise<void> {\n    if (changes.revisionId.currentValue !== changes.revisionId.previousValue) {\n      this._refetchList();\n    }\n  }\n\n  _refetchList(): void {\n    this.groupsQuery = this.itgService.getGroups(\n      this.modelId,\n      this.revisionId,\n      5000\n    );\n    this.groupsQuery.valueChanges.subscribe(\n      (results: ApolloQueryResult<{ MyGroup: any[] }>) => {\n        this.groups = results.data.MyGroup;\n      }\n    );\n  }\n\n  openDialog(): void {\n    const dialogRef = this.dialog.open(DialogOverviewExampleDialog, {\n      width: '40%',\n    });\n\n    dialogRef.afterClosed().subscribe((result) => {\n      this.newGroupName = result;\n\n      if (result) {\n        this.itgService\n          .createGroup(this.modelId, this.revisionId, result)\n          .subscribe(() => this.groupsQuery.refetch());\n      }\n    });\n  }\n\n  deleteGroup(groupId: string): void {\n    this.itgService\n      .deleteGroup(groupId)\n      .subscribe(() => this.groupsQuery.refetch());\n  }\n\n  selectGroup(groupId: string): void {\n    this.onSelectGroup.emit(groupId);\n    this.selectedGroupId = groupId;\n  }\n}\n\n@Component({\n  selector: 'dialog-overview-example-dialog',\n  templateUrl: './new-group-dialog.component.html',\n})\nexport class DialogOverviewExampleDialog {\n  constructor(\n    public dialogRef: MatDialogRef<DialogOverviewExampleDialog>,\n    @Inject(MAT_DIALOG_DATA) public name: string\n  ) {}\n\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  onYesClick(): void {}\n}\n","<h1 mat-dialog-title>Add a new Group</h1>\n<div mat-dialog-content>\n  <p>\n    Give a name for a new group, you can store all relevant 3d nodes for a model\n    within a group.\n  </p>\n  <mat-form-field>\n    <mat-label>New Group Name</mat-label>\n    <input matInput [(ngModel)]=\"name\" />\n  </mat-form-field>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\n  <button mat-button [mat-dialog-close]=\"name\" cdkFocusInitial color=\"primary\">\n    Ok\n  </button>\n</div>\n","import { Component, EventEmitter, OnInit, Output } from '@angular/core';\nimport { Model3D } from '@cognite/sdk';\nimport { CogniteApiService } from '../../cognite-api.service';\n\n@Component({\n  selector: 'app-cognite-models-list',\n  templateUrl: './cognite-models-list.component.html',\n  styleUrls: ['./cognite-models-list.component.css'],\n})\nexport class CogniteModelsListComponent implements OnInit {\n  models: Model3D[];\n  loading = true;\n  error: any;\n\n  selectedModel: number;\n  selectedRevision: number;\n\n  @Output() onModelAndRevision = new EventEmitter<\n    { modelId: number; revisionId: number } | undefined\n  >();\n\n  constructor(private cogniteApiService: CogniteApiService) {\n    this.models = [];\n  }\n\n  ngOnInit(): void {\n    this.cogniteApiService.get3DModels().subscribe((result) => {\n      this.models = result;\n    });\n  }\n\n  onModelSelected(newSelectedModelId: number): void {\n    if (newSelectedModelId === this.selectedModel) {\n      this.selectedModel = undefined;\n      this.selectedRevision = undefined;\n    } else {\n      this.selectedModel = newSelectedModelId;\n      this.selectedRevision = undefined;\n    }\n  }\n\n  onRevisionSelected(newRevisionId: number): void {\n    if (newRevisionId === this.selectedRevision) {\n      this.selectedRevision = undefined;\n      this.onModelAndRevision.emit(undefined);\n    } else {\n      this.selectedRevision = newRevisionId;\n      this.onModelAndRevision.emit({\n        modelId: this.selectedModel,\n        revisionId: this.selectedRevision,\n      });\n    }\n  }\n}\n","<div>\n  <h1>3D Models</h1>\n  <mat-list *ngFor=\"let item of models\">\n    <mat-expansion-panel\n      hideToggle\n      [expanded]=\"item.id === selectedModel\"\n      (opened)=\"onModelSelected(item.id)\"\n    >\n      <mat-expansion-panel-header>\n        <mat-panel-title>{{ item.name }}</mat-panel-title>\n      </mat-expansion-panel-header>\n      <div *ngIf=\"selectedModel === item.id\">\n        <p>Revisions</p>\n        <app-cognite-model-revisions-list\n          [modelId]=\"selectedModel\"\n          (newRevisionId)=\"onRevisionSelected($event)\"\n        ></app-cognite-model-revisions-list>\n      </div>\n    </mat-expansion-panel>\n  </mat-list>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ListResponse, Model3D, RevealNode3D, Revision3D } from '@cognite/sdk';\nimport { from, Observable } from 'rxjs';\nimport { CogniteAuthService } from './cognite-auth.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CogniteApiService {\n  constructor(private cogniteAuthService: CogniteAuthService) {}\n\n  get3DModels(): Observable<Model3D[]> {\n    return from(\n      this.cogniteAuthService\n        .getSdk()\n        .models3D.list({ limit: 1000 })\n        .autoPagingToArray()\n    );\n  }\n\n  get3DModelRevisions(modelId: number): Observable<Revision3D[]> {\n    return from(\n      this.cogniteAuthService\n        .getSdk()\n        .revisions3D.list(modelId, { limit: 1000 })\n        .autoPagingToArray()\n    );\n  }\n\n  get3DModelNode(\n    modelId: number,\n    revisionId: number,\n    nodeId: number\n  ): Observable<RevealNode3D[]> {\n    return from(\n      this.cogniteAuthService\n        .getSdk()\n        .viewer3D.listRevealNodes3D(modelId, revisionId, { nodeId, limit: 1 })\n        .autoPagingToArray()\n    );\n  }\n}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Apollo, gql } from \"apollo-angular\";\n\n@Component({\n  selector: \"app-file-list\",\n  templateUrl: \"./file-list.component.html\",\n  styleUrls: [\"./file-list.component.css\"],\n})\nexport class FileListComponent implements OnInit {\n  favourites: { fileId: string }[];\n  loading = true;\n  error: any;\n\n  constructor(private apollo: Apollo) {}\n\n  ngOnInit(): void {\n    this.apollo\n      .watchQuery<{ MyFavorite: { fileId: string }[] }>({\n        query: gql`\n          {\n            MyFavorite {\n              fileId\n            }\n          }\n        `,\n      })\n      .valueChanges.subscribe((result) => {\n        this.loading = result.loading;\n        this.error = result.error;\n        this.favourites = result.data.MyFavorite;\n      });\n  }\n}\n","<p>file-list works!</p>\n","<mat-toolbar>\r\n  <span>CDF Resource <-> ITG Demo</span>\r\n  <div style=\"margin-right: 40px\"></div>\r\n  <button [routerLink]=\"['/']\" mat-button *ngIf=\"isLoggedIn\">3D Demo</button>\r\n  <button mat-button (click)=\"logout()\" *ngIf=\"isLoggedIn\">Logout</button>\r\n</mat-toolbar>\r\n\r\n<!-- \r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n-->\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-top-bar',\r\n  templateUrl: './top-bar.component.html',\r\n  styleUrls: ['./top-bar.component.css'],\r\n})\r\nexport class TopBarComponent {\r\n  @Input() isLoggedIn: boolean;\r\n  logout() {\r\n    localStorage.clear();\r\n    window.location.href = window.location.href;\r\n  }\r\n}\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/\r\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  Input,\n  OnInit,\n} from '@angular/core';\nimport { ActivatedRoute, ParamMap, Router, RouterEvent } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { CogniteITGService } from 'src/app/itg-api.service';\n\n@Component({\n  selector: 'app-threed-page',\n  templateUrl: './threed-page.component.html',\n  styleUrls: ['./threed-page.component.css'],\n})\nexport class ThreedPageComponent implements OnInit {\n  @Input() activeRevision: { modelId: number; revisionId: number } | undefined;\n  @Input() activeNodeId: number | undefined;\n  @Input() activeGroupId: string | undefined;\n  @Input() isGroupHightlighted: boolean = false;\n\n  constructor(private router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    const { queryParams } = this.router.parseUrl(this.router.url);\n    if (queryParams.modelId && queryParams.revisionId) {\n      this.activeRevision = {\n        modelId: Number(queryParams.modelId),\n        revisionId: Number(queryParams.revisionId),\n      };\n    }\n    this.route.queryParamMap.pipe(\n      map((params: ParamMap) => {\n        if (params.get('revisionId')) {\n          this.activeRevision = {\n            revisionId: Number(params.get('revisionId')),\n            modelId: Number(params.get('modelId')),\n          };\n        }\n      })\n    );\n  }\n\n  setActiveRevision(\n    newRevision: { modelId: number; revisionId: number } | undefined\n  ) {\n    this.activeRevision = newRevision;\n    this.router.navigate([], {\n      queryParams: newRevision,\n      queryParamsHandling: 'merge', // remove to replace all query params by provided\n    });\n    this.activeGroupId = undefined;\n    this.activeNodeId = undefined;\n  }\n\n  setActiveGroup(newGroupId: string) {\n    this.activeGroupId = newGroupId;\n  }\n\n  setActiveNode(nodeId: number | undefined) {\n    this.activeNodeId = nodeId;\n  }\n\n  toggleShowVisibleNodes() {\n    this.isGroupHightlighted = !this.isGroupHightlighted;\n  }\n}\n","<div class=\"wrapper\">\n  <div class=\"left\">\n    <app-cognite-models-list\n      (onModelAndRevision)=\"setActiveRevision($event)\"\n    ></app-cognite-models-list>\n  </div>\n  <div class=\"right\">\n    <p *ngIf=\"activeRevision === undefined\">\n      Select a 3D Model + Revision to preview it\n    </p>\n    <div class=\"viewer\" *ngIf=\"activeRevision !== undefined\">\n      <app-cognite-threed-viewer\n        [modelId]=\"activeRevision.modelId\"\n        [revisionId]=\"activeRevision.revisionId\"\n        [selectedNodeId]=\"activeNodeId\"\n        [visibleGroupId]=\"isGroupHightlighted ? activeGroupId : undefined\"\n        (onNodeSelect)=\"setActiveNode($event)\"\n      ></app-cognite-threed-viewer>\n    </div>\n    <div class=\"details\" *ngIf=\"activeRevision !== undefined\">\n      <div>\n        <app-itg-groups-list\n          *ngIf=\"activeGroupId === undefined\"\n          (onSelectGroup)=\"setActiveGroup($event)\"\n          [modelId]=\"activeRevision.modelId\"\n          [revisionId]=\"activeRevision.revisionId\"\n        ></app-itg-groups-list>\n        <app-itg-group-details\n          *ngIf=\"activeGroupId !== undefined\"\n          [groupId]=\"activeGroupId\"\n          (onBackClicked)=\"setActiveGroup(undefined)\"\n          (onNodeClicked)=\"setActiveNode($event)\"\n          (onHighlightGroup)=\"toggleShowVisibleNodes()\"\n        ></app-itg-group-details>\n      </div>\n      <div class=\"node-preview\">\n        <app-cognite-threed-node-details\n          *ngIf=\"activeNodeId !== undefined\"\n          [modelId]=\"activeRevision.modelId\"\n          [revisionId]=\"activeRevision.revisionId\"\n          [nodeId]=\"activeNodeId\"\n          [groupId]=\"activeGroupId\"\n          (onClearSelection)=\"setActiveNode(undefined)\"\n        >\n        </app-cognite-threed-node-details>\n        <div *ngIf=\"activeNodeId === undefined\">\n          <h3>Select a node to see the details</h3>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n","import { Injectable, OnInit } from '@angular/core';\nimport { CogniteClient } from '@cognite/sdk';\nimport axios from 'axios';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CogniteAuthService {\n  constructor() {}\n\n  loggedIn = new BehaviorSubject(false);\n\n  sdk: CogniteClient = new CogniteClient({\n    appId: 'sample-cdf-graphql-angular-app',\n  });\n\n  getSdk() {\n    return this.sdk;\n  }\n\n  async login(apikey: string) {\n    // Validate the APIKEY supplied\n    const response = await axios.get(\n      'https://api.cognitedata.com/login/status',\n      {\n        headers: {\n          'api-key': apikey,\n        },\n      }\n    );\n\n    // Login with the APIKEY.\n    this.sdk.loginWithApiKey({\n      apiKey: apikey,\n      project: response.data.data.project,\n    });\n\n    this.loggedIn.next(true);\n  }\n\n  async logout() {\n    this.sdk = new CogniteClient({\n      appId: 'sample-cdf-graphql-angular-app',\n    });\n  }\n}\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n\r\n/*\r\nCopyright Google LLC. All Rights Reserved.\r\nUse of this source code is governed by an MIT-style license that\r\ncan be found in the LICENSE file at https://angular.io/license\r\n*/","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}